{
	"info": {
		"_postman_id": "035ce04a-b8fd-43ea-8b81-157411f8fb56",
		"name": "REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30658034"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"rayesd3d@rdayffvfeffdffdss.com\",\n    \"password\": \"{{password}}\",\n    \"passwordConfirmation\": \"{{password}}\",\n    \"name\": \"{{name}}\",\n    \"birthdate\": \"1900-01-02\",\n    \"bio\": \"Hello, world!\",\n    \"avatar\": \"https://example.com/avatar.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/user",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/users?page=1&limit=5",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "email",
									"value": "test@example.com",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "_id",
									"value": "65e5df7a90fa6bc5573b966b",
									"disabled": true
								},
								{
									"key": "verified",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Session",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response content type is JSON\", function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Access token and refresh token are present in the response\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('accessToken');",
									"    pm.expect(pm.response.json()).to.have.property('refreshToken');",
									"});",
									"",
									"// Stores the accessToken and refreshToken in collection variables",
									"pm.collectionVariables.set(\"accessToken\", pm.response.json().accessToken);",
									"pm.collectionVariables.set(\"refreshToken\", pm.response.json().refreshToken);",
									"pm.test(\"Environment variables are set correctly\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"accessToken\")).to.be.a('string');",
									"    pm.expect(pm.collectionVariables.get(\"refreshToken\")).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/session",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/api/session",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each element in the array has required properties\", function () {",
									"    pm.response.json().forEach(function(session) {",
									"        pm.expect(session).to.have.property('_id');",
									"        pm.expect(session).to.have.property('user');",
									"        pm.expect(session).to.have.property('valid');",
									"        pm.expect(session).to.have.property('userAgent');",
									"        pm.expect(session).to.have.property('createdAt');",
									"        pm.expect(session).to.have.property('updatedAt');",
									"        pm.expect(session).to.have.property('__v');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/api/sessions",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Both accessToken and refreshToken should be null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.accessToken).to.be.null;",
									"    pm.expect(responseData.refreshToken).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Check if the new access token is being set correctly in the collection variables\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.accessToken).to.be.null;",
									"    pm.expect(responseData.refreshToken).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Ensure that the response does not contain any unexpected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.not.include.any.keys('unexpectedField1', 'unexpectedField2');",
									"});",
									"",
									"pm.collectionVariables.set(\"accessToken\",pm.response.json().accessToken)",
									"pm.collectionVariables.set(\"refreshToken\",pm.response.json().refreshToken)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/api/session",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - accessToken and refreshToken\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('accessToken').that.is.null;",
									"    pm.expect(pm.response.json()).to.have.property('refreshToken').that.is.null;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.not.be.empty;",
									"});",
									"",
									"pm.collectionVariables.set(\"accessToken\",pm.response.json().accessToken)",
									"pm.collectionVariables.set(\"refreshToken\",pm.response.json().refreshToken)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/api/sessions",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"sessions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Offers",
			"item": [
				{
					"name": "Create Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"    if(jsonData){",
									"        pm.collectionVariables.set(\"offerId\", jsonData.data.offerId);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Parsing error: \", e);",
									"}",
									"",
									"",
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Verify accessToken is set in the environment variable if it exists\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"accessToken\")).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tesla inc\",\n    \"description\": \"Designed for first-time DSLR owners who want impressive results straight out of the box, capture those magic moments no matter your level with the EOS 1500D. With easy to use automatic shooting modes, large 24.1 MP sensor, Canon Camera Connect app integration and built-in feature guide, EOS 1500D is always ready to go.\",\n    \"price\": 879.99,\n    \"tel\":\"+21629701532\",\n    \"email\":\"test@test.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/offers",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/offers/{{offerId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"offers",
								"{{offerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Offers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/offers",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"offers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Id must be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Price should be a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.price).to.be.a('number');",
									"  pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Tesla inc\",\n    \"description\": \"Designed for first-time DSLR owners who want impressive results straight out of the box, capture those magic moments no matter your level with the EOS 1500D. With easy to use automatic shooting modes, large 24.1 MP sensor, Canon Camera Connect app integration and built-in feature guide, EOS 1500D is always ready to go.\",\n    \"price\": 879.99,\n    \"tel\":\"+21629701532\",\n    \"email\":\"test@test.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/offers/{{offerId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"offers",
								"{{offerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/offers/{{offerId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"offers",
								"{{offerId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Create Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {",
									"    var jsonData = JSON.parse(responseBody);",
									"    if(jsonData){",
									"        pm.collectionVariables.set(\"notificationId\", jsonData.data.notificationId);",
									"    }",
									"} catch (e) {",
									"    console.error(\"Parsing error: \", e);",
									"}",
									"",
									"",
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":\"11\",\n    \"description\": \"Designed for first-time DSLR owners who want impressive results straight out of the box, capture those magic moments no matter your level with the EOS 1500D. With easy to use automatic shooting modes, large 24.1 MP sensor, Canon Camera Connect app integration and built-in feature guide, EOS 1500D is always ready to go.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/notifications",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/notifications",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = responseHeaders['x-access-token']",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token')",
									"postman.setEnvironmentVariable(\"accessToken\", newAccessToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\":\"65e5df7a90fa6bc5573b966b\",\n    \"description\": \"Designeduilt-in feature guide, EOS 1500D is always ready to go.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/notifications/{{notificationId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newAccessToken = pm.response.headers.get('x-access-token');",
									"",
									"if(newAccessToken){",
									"    console.log('Set new access token');",
									"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
									"}",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/notifications/{{notificationId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notificationId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Get metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9100/metrics",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9100",
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "oauth",
			"item": [
				{
					"name": "facebook",
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-refresh",
								"value": "{{refreshToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/api/oauth/facebook",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"oauth",
								"facebook"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "healthcheck",
			"protocolProfileBehavior": {
				"followAuthorizationHeader": false,
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "x-refresh",
						"value": "{{refreshToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{endpoint}}/healthcheck",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"healthcheck"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const newAccessToken = pm.response.headers.get('x-access-token');",
					"",
					"if(newAccessToken){",
					"    console.log('Set new access token');",
					"    pm.collectionVariables.set(\"accessToken\", newAccessToken);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": "test@example.com"
		},
		{
			"key": "password",
			"value": "Password456!"
		},
		{
			"key": "name",
			"value": "Jane Doe"
		},
		{
			"key": "endpoint",
			"value": "https://noted-basically-krill.ngrok-free.app"
		},
		{
			"key": "offerId",
			"value": "-offerId-"
		},
		{
			"key": "accessToken",
			"value": "-accessToken-",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "-refreshToken-",
			"type": "string"
		},
		{
			"key": "notificationId",
			"value": "-notificationId-",
			"type": "string"
		}
	]
}